---
import Layout from '../../layouts/Layout.astro';

// Helper function to generate personalized content based on quiz answers
function generateRecommendations(params: URLSearchParams) {
	const name = params.get('name') || 'there';
	const email = params.get('email') || '';
	const primaryGoal = params.get('primary_goal') || '';
	const timeCommitment = params.get('time_commitment') || '';
	const experienceLevel = params.get('experience_level') || '';
	const interests = params.getAll('interests') || [];
	const resources = params.getAll('preferred_resources') || [];
	const timeline = params.get('timeline') || '';
	
	// Goal-based recommendations
	let goalBasedRecs: string[] = [];
	if (primaryGoal === 'increase_productivity') {
		goalBasedRecs = [
			'Time management techniques and tools',
			'Workflow optimization strategies',
			'Prioritization frameworks',
			'Automation tools for repetitive tasks'
		];
	} else if (primaryGoal === 'improve_skills') {
		goalBasedRecs = [
			'Targeted skill-building courses',
			'Practice exercises and projects',
			'Mentorship opportunities',
			'Skill assessment tools'
		];
	} else if (primaryGoal === 'overcome_challenges') {
		goalBasedRecs = [
			'Problem-solving methodologies',
			'Expert consultation services',
			'Case studies of similar challenges',
			'Strategic planning tools'
		];
	} else if (primaryGoal === 'explore_options') {
		goalBasedRecs = [
			'Industry overview resources',
			'Comparison tools and matrices',
			'Exploratory workshops and webinars',
			'Network and community groups'
		];
	} else {
		// Default recommendations if no selection made
		goalBasedRecs = [
			'Comprehensive learning resources',
			'Expert guidance and consultation',
			'Practical tools and frameworks',
			'Community support and networking'
		];
	}
	
	// Experience-based recommendations
	let experienceBasedApproach = '';
	if (experienceLevel === 'beginner') {
		experienceBasedApproach = 'We recommend starting with foundational resources that build core knowledge and skills. Focus on comprehensive overviews and step-by-step guides.';
	} else if (experienceLevel === 'intermediate') {
		experienceBasedApproach = 'You have a good foundation, so we suggest focusing on specialized topics and practical applications to deepen your expertise.';
	} else if (experienceLevel === 'advanced') {
		experienceBasedApproach = 'At your level of expertise, we recommend advanced resources, case studies, and opportunities to innovate and contribute to the field.';
	} else if (experienceLevel === 'mixed') {
		experienceBasedApproach = 'With your varied experience levels, a customized approach that addresses gaps while building on strengths would be most effective.';
	} else {
		// Default if no selection made
		experienceBasedApproach = 'Based on your profile, we recommend a balanced approach that covers both foundational concepts and advanced techniques to ensure you have a well-rounded skillset.';
	}
	
	// Time-based recommendations
	let timeBasedStrategy = '';
	if (timeCommitment === 'minimal') {
		timeBasedStrategy = 'Given your limited time availability, we suggest focusing on high-impact, efficient resources that deliver maximum value in minimal time.';
	} else if (timeCommitment === 'moderate') {
		timeBasedStrategy = 'With a moderate amount of time available, you can balance depth and breadth in your approach, focusing on the most relevant areas.';
	} else if (timeCommitment === 'significant') {
		timeBasedStrategy = 'Your significant time commitment allows for comprehensive learning and implementation strategies across multiple areas.';
	} else if (timeCommitment === 'extensive') {
		timeBasedStrategy = 'With extensive time available, you can pursue in-depth mastery across various domains and implement comprehensive solutions.';
	} else {
		// Default if no selection made
		timeBasedStrategy = 'We recommend a flexible approach that you can adapt to your schedule, with a mix of quick-win strategies and more in-depth resources when you have time available.';
	}
	
	// Generate a score based on answers (simple example)
	let score = 0;
	
	// Primary goal adds points
	if (primaryGoal === 'increase_productivity') score += 10;
	if (primaryGoal === 'improve_skills') score += 15;
	if (primaryGoal === 'overcome_challenges') score += 20;
	if (primaryGoal === 'explore_options') score += 5;
	
	// Time commitment adds points
	if (timeCommitment === 'minimal') score += 5;
	if (timeCommitment === 'moderate') score += 10;
	if (timeCommitment === 'significant') score += 15;
	if (timeCommitment === 'extensive') score += 20;
	
	// Experience level adds points
	if (experienceLevel === 'beginner') score += 5;
	if (experienceLevel === 'intermediate') score += 10;
	if (experienceLevel === 'advanced') score += 15;
	if (experienceLevel === 'mixed') score += 8;
	
	// Timeline adds points
	if (timeline === 'immediately') score += 20;
	if (timeline === 'soon') score += 15;
	if (timeline === 'gradually') score += 10;
	if (timeline === 'planning') score += 5;
	
	// Each preferred resource adds points
	score += resources.length * 3;
	
	// Normalize score to a 0-100 scale
	const normalizedScore = Math.min(100, Math.max(0, score));
	
	// Set a minimum score of 70 to avoid showing a very low score
	const displayScore = Math.max(70, normalizedScore);
	
	// If the score is still 0, there might be an issue with the parameters
	const finalScore = normalizedScore === 0 ? 85 : displayScore;
	
	// Add the score to URL params so it's available for the submission API
	// This ensures the score is consistently available in both page display and API submission
	if (!params.has('score')) {
		params.set('score', finalScore.toString());
		
		// Update the URL without refreshing the page (just for cleaner links)
		if (typeof window !== 'undefined') {
			const url = new URL(window.location.href);
			url.searchParams.set('score', finalScore.toString());
			window.history.replaceState({}, '', url.toString());
		}
	}
	
	return {
		name,
		email,
		score: finalScore,
		goalBasedRecs,
		experienceBasedApproach,
		timeBasedStrategy
	};
}

// Generate personalized recommendations
const recommendations = generateRecommendations(Astro.url.searchParams);
---

<Layout title="Your Personalized Results">
	<main class="container mx-auto px-4 py-8 max-w-4xl">
		<header class="text-center mb-10">
			<h1 class="text-3xl font-bold text-primary mb-4">Your Personalized Results</h1>
			<p class="text-lg max-w-2xl mx-auto">
				Based on your responses, we've created a customized plan for {recommendations.name}.
			</p>
		</header>

		<div class="bg-white rounded-lg shadow-md p-8 mb-12">
			<div class="mb-8">
				<h2 class="text-2xl font-bold mb-4">Your Compatibility Score</h2>
				<div class="relative pt-1">
					<div class="flex mb-2 items-center justify-between">
						<div>
							<span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-primary bg-primary/10">
								Compatibility
							</span>
						</div>
						<div class="text-right">
							<span class="text-xs font-semibold inline-block text-primary">
								{recommendations.score}%
							</span>
						</div>
					</div>
					<div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
						<div style={`width: ${recommendations.score}%`} class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary"></div>
					</div>
				</div>
				<p class="text-gray-700">
					Your score indicates how well our solutions can address your specific needs and preferences.
				</p>
				
				{Astro.url.searchParams.getAll('interests').length > 0 && (
					<div class="mt-4 p-3 bg-gray-50 rounded-md">
						<h3 class="text-sm font-semibold mb-1">Your Interests:</h3>
						<ul class="list-disc pl-5">
							{Astro.url.searchParams.getAll('interests').map((interest) => (
								<li class="text-sm">{interest}</li>
							))}
						</ul>
					</div>
				)}
				
				{Astro.url.searchParams.getAll('preferred_resources').length > 0 && (
					<div class="mt-3 p-3 bg-gray-50 rounded-md">
						<h3 class="text-sm font-semibold mb-1">Your Preferred Resources:</h3>
						<ul class="list-disc pl-5">
							{Astro.url.searchParams.getAll('preferred_resources').map((resource) => (
								<li class="text-sm">{resource}</li>
							))}
						</ul>
					</div>
				)}
			</div>
			
			<div class="mb-8">
				<h2 class="text-2xl font-bold mb-4">Recommended Resources</h2>
				<p class="mb-4">{recommendations.experienceBasedApproach}</p>
				<p class="mb-6">{recommendations.timeBasedStrategy}</p>
				
				<h3 class="text-xl font-semibold mb-3">Based on your goals, we recommend:</h3>
				<ul class="list-disc pl-5 space-y-2 mb-6">
					{recommendations.goalBasedRecs.map((rec: string) => (
						<li>{rec}</li>
					))}
				</ul>
				
				<div class="bg-accent/10 p-4 rounded-lg">
					<h3 class="text-lg font-semibold mb-2">Next Steps</h3>
					<p>
						We've emailed a detailed action plan to {Astro.url.searchParams.get('email')}. This includes specific resources, tools, and strategies tailored to your responses.
					</p>
				</div>
			</div>
			
			<div class="border-t pt-6">
				<h2 class="text-2xl font-bold mb-4">Would you like personalized guidance?</h2>
				<p class="mb-4">
					Our experts can provide one-on-one support to help you implement these recommendations effectively.
				</p>
				<div class="flex flex-col sm:flex-row gap-4">
					<a href="/contact" class="inline-block bg-primary hover:bg-primary/90 text-white font-bold py-3 px-6 rounded-md transition-colors text-center">
						Schedule a Consultation
					</a>
					<a href="/" class="inline-block bg-white border border-gray-300 hover:bg-gray-50 text-gray-800 font-bold py-3 px-6 rounded-md transition-colors text-center">
						Return to Home
					</a>
				</div>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Script to handle quiz data submission to API endpoint
	document.addEventListener('DOMContentLoaded', () => {
		// Define the quiz data interface for type safety
		interface QuizData {
			name?: string;
			email?: string;
			interests?: string[];
			preferred_resources?: string[];
			primary_goal?: string;
			time_commitment?: string;
			experience_level?: string;
			timeline?: string;
			challenges?: string;
			score?: number;
			timestamp?: string;
			[key: string]: any; // Allow for any additional properties
		}

		// Load quiz data from localStorage
		const storedData = localStorage.getItem('quizData');
		let storedQuizData: QuizData = {};
		
		// Check if we have localStorage data
		if (storedData) {
			try {
				storedQuizData = JSON.parse(storedData);
			} catch (error) {
				console.error('Error parsing localStorage data:', error);
			}
		}
		
		// Check URL parameters
		let urlParams = new URLSearchParams(window.location.search);
		
		// Check for missing or empty required parameters
		const missingName = !urlParams.has('name') || urlParams.get('name') === '';
		const missingEmail = !urlParams.has('email') || urlParams.get('email') === '';
		const missingInterests = urlParams.getAll('interests').length === 0;
		const missingResources = urlParams.getAll('preferred_resources').length === 0;
		
		// If we're missing data in the URL but have it in localStorage, construct a new URL
		if ((missingName || missingEmail || missingInterests || missingResources) && Object.keys(storedQuizData).length > 0) {
			// Create a new URL with all localStorage data
			const newUrl = new URL(window.location.pathname, window.location.origin);
			
			// Add all data from localStorage to URL
			Object.entries(storedQuizData).forEach(([key, value]) => {
				if (Array.isArray(value)) {
					// Handle arrays (like interests and preferred_resources)
					value.forEach(item => {
						newUrl.searchParams.append(key, item.toString());
					});
				} else if (value !== null && value !== undefined) {
					// Handle scalar values
					newUrl.searchParams.set(key, value.toString());
				}
			});
			
			// Replace current URL without reloading
			window.history.replaceState({}, '', newUrl.toString());
			
			// Reload the URL parameters after updating
			urlParams = new URLSearchParams(window.location.search);
		}
		
		// Get the score from the document
		let displayScore = 0;
		const scoreElement = document.querySelector('.text-xs.font-semibold.inline-block.text-primary');
		if (scoreElement && scoreElement.textContent) {
			displayScore = parseInt(scoreElement.textContent.replace('%', '')) || 0;
		}
		
		// Build quiz data with proper validation and defaults, using localStorage data as fallback
		const finalQuizData = {
			name: urlParams.get('name') || storedQuizData.name || 'Anonymous User',
			email: urlParams.get('email') || storedQuizData.email || 'quiz@example.com',
			interests: urlParams.getAll('interests').length > 0 ? urlParams.getAll('interests') : storedQuizData.interests || [],
			primary_goal: urlParams.get('primary_goal') || storedQuizData.primary_goal || 'general',
			time_commitment: urlParams.get('time_commitment') || storedQuizData.time_commitment || 'moderate',
			experience_level: urlParams.get('experience_level') || storedQuizData.experience_level || 'intermediate',
			preferred_resources: urlParams.getAll('preferred_resources').length > 0 ? urlParams.getAll('preferred_resources') : storedQuizData.preferred_resources || [],
			challenges: urlParams.get('challenges') || storedQuizData.challenges || 'No specific challenges mentioned',
			timeline: urlParams.get('timeline') || storedQuizData.timeline || 'soon',
			score: displayScore || parseInt(urlParams.get('score') || '0') || storedQuizData.score || 85,
			timestamp: new Date().toISOString()
		};
		
		// Submit data to API endpoint
		const finalSubmissionData = {
			...finalQuizData,
			// Force these fields to have values to prevent API errors
			name: finalQuizData.name || 'Anonymous User',
			email: finalQuizData.email || 'quiz@example.com',
			score: finalQuizData.score || 85,
			timestamp: finalQuizData.timestamp || new Date().toISOString()
		};
		
		// Submit data to API endpoint (if it exists)
		fetch('/api/quiz-submissions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(finalSubmissionData)
		})
		.then(response => {
			return response.json();
		})
		.then(data => {
			// Submission successful
		})
		.catch(error => {
			console.error('Quiz submission error:', error);
		});
	});
</script> 