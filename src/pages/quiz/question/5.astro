---
import QuizLayout from '../../../layouts/QuizLayout.astro';
---

<QuizLayout title="Quiz | Final Question" currentStep={5} totalSteps={5}>
	<h1 class="text-2xl font-bold text-primary mb-6">Almost done! One last question...</h1>
	
	<form action="/quiz/results" method="get" class="space-y-6" id="finalForm">
		<!-- Pass along previous data -->
		<input type="hidden" name="name" value={Astro.url.searchParams.get('name') || ''} />
		<input type="hidden" name="email" value={Astro.url.searchParams.get('email') || ''} />
		
		{Astro.url.searchParams.getAll('interests').map(interest => (
			<input type="hidden" name="interests" value={interest} />
		))}
		
		<input type="hidden" name="primary_goal" value={Astro.url.searchParams.get('primary_goal') || ''} />
		<input type="hidden" name="time_commitment" value={Astro.url.searchParams.get('time_commitment') || ''} />
		<input type="hidden" name="experience_level" value={Astro.url.searchParams.get('experience_level') || ''} />
		
		{Astro.url.searchParams.getAll('preferred_resources').map(resource => (
			<input type="hidden" name="preferred_resources" value={resource} />
		))}

		<div>
			<label for="challenges" class="block text-lg font-medium text-gray-900 mb-3">
				What specific challenges or obstacles are you facing right now?
			</label>
			<textarea 
				id="challenges" 
				name="challenges" 
				rows="5" 
				class="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
				placeholder="Please describe any specific issues you're dealing with that you'd like help addressing..."
			></textarea>
			<p class="mt-2 text-sm text-gray-500">
				This helps us tailor our recommendations to your unique situation.
			</p>
		</div>
		
		<div>
			<label class="block text-lg font-medium text-gray-900 mb-3">
				How soon do you want to implement solutions?
			</label>
			
			<div class="space-y-3">
				<label class="flex items-center">
					<input 
						type="radio" 
						name="timeline" 
						value="immediately" 
						class="h-4 w-4 text-primary"
						required
					/>
					<span class="ml-2">Immediately (within days)</span>
				</label>
				
				<label class="flex items-center">
					<input 
						type="radio" 
						name="timeline" 
						value="soon" 
						class="h-4 w-4 text-primary"
						required
					/>
					<span class="ml-2">Soon (within weeks)</span>
				</label>
				
				<label class="flex items-center">
					<input 
						type="radio" 
						name="timeline" 
						value="gradually" 
						class="h-4 w-4 text-primary"
						required
					/>
					<span class="ml-2">Gradually (over months)</span>
				</label>
				
				<label class="flex items-center">
					<input 
						type="radio" 
						name="timeline" 
						value="planning" 
						class="h-4 w-4 text-primary"
						required
					/>
					<span class="ml-2">Just planning for the future</span>
				</label>
			</div>
		</div>
		
		<div class="pt-4 flex justify-between">
			<a 
				href={`/quiz/question/4?name=${Astro.url.searchParams.get('name') || ''}&email=${Astro.url.searchParams.get('email') || ''}`}
				class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
			>
				Previous
			</a>
			<button 
				type="submit" 
				id="finalButton"
				class="inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90"
			>
				Get Your Results
			</button>
		</div>
	</form>
</QuizLayout> 

<script>
	// Define interface for quiz data
	interface QuizData {
		name?: string;
		email?: string;
		interests?: string[];
		primary_goal?: string;
		time_commitment?: string;
		experience_level?: string;
		preferred_resources?: string[];
		timeline?: string;
		challenges?: string;
		completed_at?: string;
		score?: number;
		[key: string]: any;
	}
	
	// Using localStorage for reliable data persistence
	document.addEventListener('DOMContentLoaded', () => {
		const form = document.getElementById('finalForm') as HTMLFormElement;
		
		// Load existing quiz data from localStorage
		try {
			const storedData = localStorage.getItem('quizData');
			if (storedData) {
				const quizData: QuizData = JSON.parse(storedData);
				
				// Pre-fill hidden fields from localStorage data
				const nameField = document.querySelector('input[name="name"]') as HTMLInputElement;
				const emailField = document.querySelector('input[name="email"]') as HTMLInputElement;
				
				if (nameField && quizData.name) nameField.value = quizData.name;
				if (emailField && quizData.email) emailField.value = quizData.email;
				
				// Pre-fill challenges field if it exists
				const challengesField = document.getElementById('challenges') as HTMLTextAreaElement;
				if (challengesField && quizData.challenges) challengesField.value = quizData.challenges;
				
				// Pre-select timeline if it exists
				if (quizData.timeline) {
					const timelineInput = document.querySelector(`input[name="timeline"][value="${quizData.timeline}"]`) as HTMLInputElement;
					if (timelineInput) timelineInput.checked = true;
				}
			}
		} catch (error) {
			console.error('Error loading quiz data from localStorage:', error);
		}
		
		if (form) {
			form.addEventListener('submit', (e) => {
				e.preventDefault(); // Prevent default form submission
				
				// Get form data
				const formData = new FormData(form);
				const challenges = formData.get('challenges')?.toString() || '';
				const timeline = formData.get('timeline')?.toString() || '';
				
				// Validate timeline selection
				if (!timeline) {
					alert('Please select a timeline for implementing solutions');
					return false;
				}
				
				// Load existing data, update it with new values
				try {
					const storedData = localStorage.getItem('quizData');
					let quizData: QuizData = storedData ? JSON.parse(storedData) : {};
					
					// Update with new information
					quizData = {
						...quizData,
						challenges,
						timeline,
						completed_at: new Date().toISOString()
					};
					
					// Save updated data
					localStorage.setItem('quizData', JSON.stringify(quizData));
					
					// Create the results URL
					const url = new URL('/quiz/results', window.location.origin);
					
					// Add all data from localStorage to URL for the results page
					Object.entries(quizData).forEach(([key, value]) => {
						if (Array.isArray(value)) {
							// Handle arrays (like interests and preferred_resources)
							value.forEach(item => {
								url.searchParams.append(key, item.toString());
							});
						} else if (value !== null && value !== undefined) {
							// Handle scalar values
							url.searchParams.set(key, value.toString());
						}
					});
					
					// Navigate to the results page with all data
					window.location.href = url.toString();
				} catch (error) {
					console.error('Error updating quiz data in localStorage:', error);
					alert('There was an error saving your response. Please try again.');
				}
			});
		}
	});
</script> 