---
import Layout from '../../layouts/Layout.astro';

// Helper function to generate personalized content based on quiz answers
function generateRecommendations(params: URLSearchParams) {
	const name = params.get('name') || 'there';
	const primaryGoal = params.get('primary_goal') || '';
	const timeCommitment = params.get('time_commitment') || '';
	const experienceLevel = params.get('experience_level') || '';
	const resources = params.getAll('preferred_resources') || [];
	const timeline = params.get('timeline') || '';
	
	// For debugging - log all input values
	console.log('Quiz inputs:', {
		name,
		primaryGoal,
		timeCommitment,
		experienceLevel,
		resources,
		timeline
	});
	
	// Goal-based recommendations
	let goalBasedRecs: string[] = [];
	if (primaryGoal === 'increase_productivity') {
		goalBasedRecs = [
			'Time management techniques and tools',
			'Workflow optimization strategies',
			'Prioritization frameworks',
			'Automation tools for repetitive tasks'
		];
	} else if (primaryGoal === 'improve_skills') {
		goalBasedRecs = [
			'Targeted skill-building courses',
			'Practice exercises and projects',
			'Mentorship opportunities',
			'Skill assessment tools'
		];
	} else if (primaryGoal === 'overcome_challenges') {
		goalBasedRecs = [
			'Problem-solving methodologies',
			'Expert consultation services',
			'Case studies of similar challenges',
			'Strategic planning tools'
		];
	} else if (primaryGoal === 'explore_options') {
		goalBasedRecs = [
			'Industry overview resources',
			'Comparison tools and matrices',
			'Exploratory workshops and webinars',
			'Network and community groups'
		];
	}
	
	// Experience-based recommendations
	let experienceBasedApproach = '';
	if (experienceLevel === 'beginner') {
		experienceBasedApproach = 'We recommend starting with foundational resources that build core knowledge and skills. Focus on comprehensive overviews and step-by-step guides.';
	} else if (experienceLevel === 'intermediate') {
		experienceBasedApproach = 'You have a good foundation, so we suggest focusing on specialized topics and practical applications to deepen your expertise.';
	} else if (experienceLevel === 'advanced') {
		experienceBasedApproach = 'At your level of expertise, we recommend advanced resources, case studies, and opportunities to innovate and contribute to the field.';
	} else if (experienceLevel === 'mixed') {
		experienceBasedApproach = 'With your varied experience levels, a customized approach that addresses gaps while building on strengths would be most effective.';
	}
	
	// Time-based recommendations
	let timeBasedStrategy = '';
	if (timeCommitment === 'minimal') {
		timeBasedStrategy = 'Given your limited time availability, we suggest focusing on high-impact, efficient resources that deliver maximum value in minimal time.';
	} else if (timeCommitment === 'moderate') {
		timeBasedStrategy = 'With a moderate amount of time available, you can balance depth and breadth in your approach, focusing on the most relevant areas.';
	} else if (timeCommitment === 'significant') {
		timeBasedStrategy = 'Your significant time commitment allows for comprehensive learning and implementation strategies across multiple areas.';
	} else if (timeCommitment === 'extensive') {
		timeBasedStrategy = 'With extensive time available, you can pursue in-depth mastery across various domains and implement comprehensive solutions.';
	}
	
	// Generate a score based on answers (simple example)
	let score = 0;
	
	// Primary goal adds points
	if (primaryGoal === 'increase_productivity') score += 10;
	if (primaryGoal === 'improve_skills') score += 15;
	if (primaryGoal === 'overcome_challenges') score += 20;
	if (primaryGoal === 'explore_options') score += 5;
	
	// Time commitment adds points
	if (timeCommitment === 'minimal') score += 5;
	if (timeCommitment === 'moderate') score += 10;
	if (timeCommitment === 'significant') score += 15;
	if (timeCommitment === 'extensive') score += 20;
	
	// Experience level adds points
	if (experienceLevel === 'beginner') score += 5;
	if (experienceLevel === 'intermediate') score += 10;
	if (experienceLevel === 'advanced') score += 15;
	if (experienceLevel === 'mixed') score += 8;
	
	// Timeline adds points
	if (timeline === 'immediately') score += 20;
	if (timeline === 'soon') score += 15;
	if (timeline === 'gradually') score += 10;
	if (timeline === 'planning') score += 5;
	
	// Each preferred resource adds points
	score += resources.length * 3;
	
	// For debugging - log score calculation
	console.log('Score before normalization:', score);
	
	// Normalize score to a 0-100 scale
	const normalizedScore = Math.min(100, Math.max(0, score));
	console.log('Final normalized score:', normalizedScore);
	
	// Set a minimum score of 70 to avoid showing a very low score
	const displayScore = Math.max(70, normalizedScore);
	
	// If the score is still 0, there might be an issue with the parameters
	const finalScore = normalizedScore === 0 ? 85 : displayScore;
	
	// Add the score to URL params so it's available for the submission API
	// This ensures the score is consistently available in both page display and API submission
	if (!params.has('score')) {
		params.set('score', finalScore.toString());
		
		// Update the URL without refreshing the page (just for cleaner links)
		if (typeof window !== 'undefined') {
			const url = new URL(window.location.href);
			url.searchParams.set('score', finalScore.toString());
			window.history.replaceState({}, '', url.toString());
		}
	}
	
	return {
		name,
		score: finalScore,
		goalBasedRecs,
		experienceBasedApproach,
		timeBasedStrategy
	};
}

// Generate personalized recommendations
const recommendations = generateRecommendations(Astro.url.searchParams);
---

<Layout title="Your Personalized Results">
	<main class="container mx-auto px-4 py-8 max-w-4xl">
		<header class="text-center mb-10">
			<h1 class="text-3xl font-bold text-primary mb-4">Your Personalized Results</h1>
			<p class="text-lg max-w-2xl mx-auto">
				Based on your responses, we've created a customized plan for {recommendations.name}.
			</p>
		</header>

		<div class="bg-white rounded-lg shadow-md p-8 mb-12">
			<div class="mb-8">
				<h2 class="text-2xl font-bold mb-4">Your Compatibility Score</h2>
				<div class="relative pt-1">
					<div class="flex mb-2 items-center justify-between">
						<div>
							<span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-primary bg-primary/10">
								Compatibility
							</span>
						</div>
						<div class="text-right">
							<span class="text-xs font-semibold inline-block text-primary">
								{recommendations.score}%
							</span>
						</div>
					</div>
					<div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
						<div style={`width: ${recommendations.score}%`} class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary"></div>
					</div>
				</div>
				<p class="text-gray-700">
					Your score indicates how well our solutions can address your specific needs and preferences.
				</p>
			</div>
			
			<div class="mb-8">
				<h2 class="text-2xl font-bold mb-4">Recommended Resources</h2>
				<p class="mb-4">{recommendations.experienceBasedApproach}</p>
				<p class="mb-6">{recommendations.timeBasedStrategy}</p>
				
				<h3 class="text-xl font-semibold mb-3">Based on your goals, we recommend:</h3>
				<ul class="list-disc pl-5 space-y-2 mb-6">
					{recommendations.goalBasedRecs.map((rec: string) => (
						<li>{rec}</li>
					))}
				</ul>
				
				<div class="bg-accent/10 p-4 rounded-lg">
					<h3 class="text-lg font-semibold mb-2">Next Steps</h3>
					<p>
						We've emailed a detailed action plan to {Astro.url.searchParams.get('email')}. This includes specific resources, tools, and strategies tailored to your responses.
					</p>
				</div>
			</div>
			
			<div class="border-t pt-6">
				<h2 class="text-2xl font-bold mb-4">Would you like personalized guidance?</h2>
				<p class="mb-4">
					Our experts can provide one-on-one support to help you implement these recommendations effectively.
				</p>
				<div class="flex flex-col sm:flex-row gap-4">
					<a href="/contact" class="inline-block bg-primary hover:bg-primary/90 text-white font-bold py-3 px-6 rounded-md transition-colors text-center">
						Schedule a Consultation
					</a>
					<a href="/" class="inline-block bg-white border border-gray-300 hover:bg-gray-50 text-gray-800 font-bold py-3 px-6 rounded-md transition-colors text-center">
						Return to Home
					</a>
				</div>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Script to handle quiz data submission to API endpoint
	document.addEventListener('DOMContentLoaded', () => {
		// Create a debug section on the page
		const debugSection = document.createElement('div');
		debugSection.id = 'api-debug';
		debugSection.style.display = 'none';
		debugSection.style.margin = '20px auto';
		debugSection.style.maxWidth = '800px';
		debugSection.style.padding = '15px';
		debugSection.style.border = '1px solid #ccc';
		debugSection.style.borderRadius = '5px';
		debugSection.style.backgroundColor = '#f8f8f8';
		debugSection.style.fontFamily = 'monospace';
		debugSection.style.whiteSpace = 'pre-wrap';
		debugSection.style.fontSize = '14px';
		debugSection.innerHTML = '<h3>API Debug Information</h3><p>Submitting quiz data...</p>';
		document.body.appendChild(debugSection);
		
		// Add a toggle button
		const toggleButton = document.createElement('button');
		toggleButton.textContent = 'Show Debug Info';
		toggleButton.style.position = 'fixed';
		toggleButton.style.bottom = '20px';
		toggleButton.style.right = '20px';
		toggleButton.style.padding = '8px 12px';
		toggleButton.style.borderRadius = '4px';
		toggleButton.style.backgroundColor = '#f0f0f0';
		toggleButton.style.border = '1px solid #ccc';
		toggleButton.style.cursor = 'pointer';
		toggleButton.onclick = () => {
			const isVisible = debugSection.style.display !== 'none';
			debugSection.style.display = isVisible ? 'none' : 'block';
			toggleButton.textContent = isVisible ? 'Show Debug Info' : 'Hide Debug Info';
		};
		document.body.appendChild(toggleButton);
		
		// Helper function to log to debug section
		const logToDebug = (message: string, isError = false) => {
			const line = document.createElement('div');
			line.style.color = isError ? 'red' : 'black';
			line.style.marginBottom = '5px';
			line.textContent = message;
			debugSection.appendChild(line);
		};
		
		// Get form data
		const params = new URLSearchParams(window.location.search);
		
		// Get the score from the document
		// This gets the actual score displayed on the page rather than relying on URL params
		let displayScore = 0;
		const scoreElement = document.querySelector('.text-xs.font-semibold.inline-block.text-primary');
		if (scoreElement && scoreElement.textContent) {
			displayScore = parseInt(scoreElement.textContent.replace('%', '')) || 0;
			logToDebug(`Score from page element: ${displayScore}%`);
		} else {
			logToDebug('Warning: Could not find score element on page', true);
		}
		
		// Log all URL parameters for debugging
		logToDebug('All URL parameters:');
		params.forEach((value, key) => {
			logToDebug(`${key}: ${value}`);
		});
		
		// Build quiz data with proper validation and defaults
		const quizData = {
			name: params.get('name') || 'Anonymous',
			email: params.get('email') || '',
			interests: params.getAll('interests') || [],
			primary_goal: params.get('primary_goal') || '',
			time_commitment: params.get('time_commitment') || '',
			experience_level: params.get('experience_level') || '',
			preferred_resources: params.getAll('preferred_resources') || [],
			challenges: params.get('challenges') || '',
			timeline: params.get('timeline') || '',
			// Use the score from the page element, fallback to URL param, fallback to default
			score: displayScore || parseInt(params.get('score') || '0'),
			timestamp: new Date().toISOString()
		};
		
		// Log the data being sent
		logToDebug(`Submitting data for: ${quizData.name}`);
		logToDebug(`Email: ${quizData.email || 'Not provided'}`);
		logToDebug(`Score: ${quizData.score}`);
		logToDebug(`Primary Goal: ${quizData.primary_goal}`);
		logToDebug(`Time Commitment: ${quizData.time_commitment}`);
		logToDebug(`Experience Level: ${quizData.experience_level}`);
		logToDebug(`Timeline: ${quizData.timeline}`);
		logToDebug(`Challenges: ${quizData.challenges}`);
		logToDebug(`Interests: ${quizData.interests.join(', ')}`);
		logToDebug(`Preferred Resources: ${quizData.preferred_resources.join(', ')}`);
		
		// Submit data to API endpoint
		fetch('/api/quiz-submissions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(quizData)
		})
		.then(response => {
			logToDebug(`Response status: ${response.status}`);
			return response.json();
		})
		.then(data => {
			logToDebug('Submission successful!');
			logToDebug(`Submission ID: ${data.id || 'Unknown'}`);
			
			// Display logs from the server if available
			if (data.logs && Array.isArray(data.logs)) {
				logToDebug('Server logs:');
				data.logs.forEach((log: string) => logToDebug(`- ${log}`));
			}
			
			console.log('Quiz submission success:', data);
		})
		.catch(error => {
			logToDebug(`Error submitting quiz data: ${error.message}`, true);
			console.error('Quiz submission error:', error);
		});
	});
</script> 