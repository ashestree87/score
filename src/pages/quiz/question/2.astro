---
import QuizLayout from '../../../layouts/QuizLayout.astro';
---

<QuizLayout title="Quiz | Question 2" currentStep={2} totalSteps={5}>
	<h1 class="text-2xl font-bold text-primary mb-6">How much time can you dedicate?</h1>
	
	<form id="timeCommitmentForm" action="/quiz/question/3" method="get" class="space-y-6">
		<!-- Pass along previous data -->
		<input type="hidden" name="name" value={Astro.url.searchParams.get('name') || ''} />
		<input type="hidden" name="email" value={Astro.url.searchParams.get('email') || ''} />
		
		{Astro.url.searchParams.getAll('interests').map(interest => (
			<input type="hidden" name="interests" value={interest} />
		))}
		
		<input type="hidden" name="primary_goal" value={Astro.url.searchParams.get('primary_goal') || ''} />

		<div class="space-y-4">
			<label class="block p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
				<input 
					type="radio" 
					name="time_commitment" 
					value="minimal" 
					class="h-4 w-4 text-primary"
					required
				/>
				<span class="ml-2 font-medium">Minimal (0-2 hours per week)</span>
				<p class="mt-1 ml-6 text-sm text-gray-600">
					I have very limited time available and need solutions that fit into a busy schedule.
				</p>
			</label>
			
			<label class="block p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
				<input 
					type="radio" 
					name="time_commitment" 
					value="moderate" 
					class="h-4 w-4 text-primary"
					required
				/>
				<span class="ml-2 font-medium">Moderate (3-5 hours per week)</span>
				<p class="mt-1 ml-6 text-sm text-gray-600">
					I can dedicate a reasonable amount of time to working on my goals.
				</p>
			</label>
			
			<label class="block p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
				<input 
					type="radio" 
					name="time_commitment" 
					value="significant" 
					class="h-4 w-4 text-primary"
					required
				/>
				<span class="ml-2 font-medium">Significant (6-10 hours per week)</span>
				<p class="mt-1 ml-6 text-sm text-gray-600">
					I'm willing to invest substantial time to achieve better results.
				</p>
			</label>
			
			<label class="block p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors">
				<input 
					type="radio" 
					name="time_commitment" 
					value="extensive" 
					class="h-4 w-4 text-primary"
					required
				/>
				<span class="ml-2 font-medium">Extensive (10+ hours per week)</span>
				<p class="mt-1 ml-6 text-sm text-gray-600">
					I'm fully committed and can dedicate significant time to my objectives.
				</p>
			</label>
		</div>
		
		<div class="pt-4 flex justify-between">
			<a 
				href={`/quiz/question/1?name=${Astro.url.searchParams.get('name') || ''}&email=${Astro.url.searchParams.get('email') || ''}`}
				class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
			>
				Previous
			</a>
			<button 
				type="submit" 
				class="inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90"
			>
				Next Question
			</button>
		</div>
	</form>
</QuizLayout>

<script>
	// Define interface for quiz data
	interface QuizData {
		name?: string;
		email?: string;
		interests?: string[];
		primary_goal?: string;
		time_commitment?: string;
		experience_level?: string;
		preferred_resources?: string[];
		timeline?: string;
		challenges?: string;
		score?: number;
		[key: string]: any;
	}
	
	document.addEventListener('DOMContentLoaded', () => {
		// Load quiz data from localStorage
		const storedData = localStorage.getItem('quizData');
		let quizData: QuizData = {};
		
		if (storedData) {
			try {
				quizData = JSON.parse(storedData);
				
				// Pre-fill form fields with stored data
				const nameInput = document.querySelector('input[name="name"]') as HTMLInputElement | null;
				const emailInput = document.querySelector('input[name="email"]') as HTMLInputElement | null;
				
				if (nameInput && quizData.name) nameInput.value = quizData.name;
				if (emailInput && quizData.email) emailInput.value = quizData.email;
				
				// Pre-select the time commitment if it exists
				if (quizData.time_commitment) {
					const timeInput = document.querySelector(`input[name="time_commitment"][value="${quizData.time_commitment}"]`) as HTMLInputElement | null;
					if (timeInput) timeInput.checked = true;
				}
			} catch (error) {
				console.error('Error parsing localStorage data:', error);
			}
		}
		
		// Handle form submission
		const form = document.getElementById('timeCommitmentForm') as HTMLFormElement | null;
		if (form) {
			form.addEventListener('submit', (e) => {
				e.preventDefault();
				
				// Get form data
				const formData = new FormData(form);
				const timeCommitment = formData.get('time_commitment')?.toString() || '';
				
				if (!timeCommitment) {
					alert('Please select a time commitment option');
					return;
				}
				
				// Update localStorage with new time commitment data
				if (storedData) {
					try {
						const updatedData: QuizData = JSON.parse(storedData);
						updatedData.time_commitment = timeCommitment;
						localStorage.setItem('quizData', JSON.stringify(updatedData));
					} catch (error) {
						console.error('Error updating localStorage data:', error);
					}
				} else {
					// Create new data object if none exists
					const newData: QuizData = {
						name: formData.get('name')?.toString() || '',
						email: formData.get('email')?.toString() || '',
						interests: Array.from(formData.getAll('interests')).map(item => item.toString()),
						primary_goal: formData.get('primary_goal')?.toString() || '',
						time_commitment: timeCommitment
					};
					localStorage.setItem('quizData', JSON.stringify(newData));
				}
				
				// Redirect to next page
				window.location.href = `/quiz/question/3?name=${encodeURIComponent(formData.get('name')?.toString() || '')}&email=${encodeURIComponent(formData.get('email')?.toString() || '')}`;
			});
		}
	});
</script> 